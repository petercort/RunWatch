services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: runwatch-mongodb
    restart: always
    env_file: .env
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - runwatch-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Backend service
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: runwatch-server
    restart: always
    env_file: .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5001
      MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGO_INITDB_DATABASE}?authSource=admin
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      CLIENT_URL: ${CLIENT_URL:-http://localhost}
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_APP_PRIVATE_KEY_PATH: /app/private-key.pem
    volumes:
      - type: bind
        source: ${GITHUB_APP_PRIVATE_KEY_PATH}
        target: /app/private-key.pem
        read_only: true
    ports:
      - "5001:5001"
    networks:
      - runwatch-network
    depends_on:
      mongodb:
        condition: service_healthy

  # Frontend service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_APP_API_URL: ${VITE_APP_API_URL}
        VITE_APP_WEBSOCKET_URL: ${VITE_APP_WEBSOCKET_URL}
    container_name: runwatch-client
    restart: always
    ports:
      - "80:80"
    networks:
      - runwatch-network
    depends_on:
      - server

networks:
  runwatch-network:
    driver: bridge

volumes:
  mongodb_data: